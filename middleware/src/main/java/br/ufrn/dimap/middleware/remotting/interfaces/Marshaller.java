package br.ufrn.dimap.middleware.remotting.interfaces;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Set;

import br.ufrn.dimap.middleware.remotting.impl.MarshalException;
import br.ufrn.dimap.middleware.remotting.impl.UnmarshalException;

/**
 * Represents a Marshaller, which is used for
 * generating (marshalling) and interpreting (unmarshalling)
 * byte stream representations of objects to be transmitted
 * over the network, optionally converting them to a structured
 * marshaling format beforehand (e.g. XML, CDR, etc).
 * 
 * @author carlosemv
 */
public interface Marshaller {
	/**
	 * Generates byte stream that represents object.
	 * 
	 * @param object 	the object to be marshalled
	 * @param context	All classes that will be marshalled
	 *  				but are not statically visible from Class<T>
	 * @return 	byte stream representation of object
	 */
	public <T> ByteArrayOutputStream marshal(T object, Set<Class<?>> context) throws MarshalException;
	public <T> ByteArrayOutputStream marshal(T object) throws MarshalException;
	
	/**
	 * Interprets byte stream generated by an instance
	 * of the same Marshaller implementation into its
	 * corresponding object.
	 * 
	 * @param inputStream	marshaled object as byte stream
	 * @param tgtClass	class of object to be unmarshalled
	 * @param context	All classes that will be unmarshalled
	 *  				but are not statically visible from Class<T>
	 * @return 	object represented by inputStream
	 */
	public <T> T unmarshal(ByteArrayInputStream inputStream, Class<T> tgtClass, Set<Class<?>> context) throws UnmarshalException;
	public <T> T unmarshal(ByteArrayInputStream inputStream, Class<T> tgtClass) throws UnmarshalException;
}
